(()=>{"use strict";var n={426:(n,r,e)=>{e.d(r,{Z:()=>c});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,"body {\r\n  background-color: #fff;\r\n}\r\n\r\nh1 {\r\n  display: none;\r\n}\r\n\r\n.list-container {\r\n  margin: 5% 25% 0 25%;\r\n  padding: 20px 0 0 0;\r\n  box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\r\n  -webkit-box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\r\n  -moz-box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\r\n}\r\n\r\n.iconed,\r\n.sub-icon {\r\n  padding-right: 10px;\r\n  cursor: pointer;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.sub-icon:hover {\r\n  font-size: 20px;\r\n}\r\n\r\np {\r\n  font-size: 1.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n}\r\n\r\n.contain-icons {\r\n  display: flex;\r\n}\r\n\r\n.to-do-list {\r\n  padding: 0;\r\n}\r\n\r\n.text {\r\n  border: 0;\r\n  text-transform: inherit;\r\n  font-style: italic;\r\n  padding: 16px 10px;\r\n  padding-bottom: 16px;\r\n  width: 100%;\r\n  outline: none;\r\n  \r\n}\r\n\r\nul li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 2%;\r\n  border-bottom: 1px solid #c9bebeab;\r\n}\r\n\r\n.input {\r\n  width: 100%;\r\n}\r\n\r\nul li:last-child {\r\n  justify-content: center;\r\n}\r\n\r\n.icons {\r\n  color: #746d6d;\r\n}\r\n\r\n.icons:hover {\r\n  cursor: move;\r\n  color: #000;\r\n}\r\n\r\n.icon-d {\r\n  padding-right: 5px;\r\n}\r\n\r\n/* .icon-d:hover {\r\n  color: orange;\r\n  font-size: 20px;\r\n} */\r\n\r\n.strike-through {\r\n  text-decoration: line-through;\r\n  color: #746d6d;\r\n}\r\n\r\n.task {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n}\r\n\r\n.contain {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid #c9bebeab;\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.heading {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-bottom: 20px;\r\n  border-bottom: 1px solid #c9bebeab;\r\n}\r\n\r\n.to-do-list button {\r\n  border: 0;\r\n  background-color: #fff;\r\n  margin: 16px;\r\n  font-size: 16px;\r\n  color: #746d6d;\r\n}\r\n\r\n.clear-all {\r\n  border: none;\r\n  background-color: #fff;\r\n  width: 100%;\r\n  font-size: 25px;\r\n  margin-bottom: 10px;\r\n  padding: 1rem 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.clear-all:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.save {\r\n  border: none;\r\n  background-color: #548b3b85;\r\n  padding: 15px;\r\n  font-size: 16px;\r\n  width: 100%;\r\n  display: none;\r\n}\r\n\r\n.save:hover {\r\n  background-color: #548b3be6;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,oBAAoB;EACpB,mBAAmB;EACnB,6CAA6C;EAC7C,qDAAqD;EACrD,kDAAkD;AACpD;;AAEA;;EAEE,mBAAmB;EACnB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,WAAW;AACb;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,SAAS;EACT,uBAAuB;EACvB,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;EACpB,WAAW;EACX,aAAa;;AAEf;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,WAAW;EACX,kCAAkC;AACpC;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,kBAAkB;AACpB;;AAEA;;;GAGG;;AAEH;EACE,6BAA6B;EAC7B,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,kCAAkC;EAClC,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,oBAAoB;EACpB,kCAAkC;AACpC;;AAEA;EACE,SAAS;EACT,sBAAsB;EACtB,YAAY;EACZ,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,sBAAsB;EACtB,WAAW;EACX,eAAe;EACf,mBAAmB;EACnB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,YAAY;EACZ,2BAA2B;EAC3B,aAAa;EACb,eAAe;EACf,WAAW;EACX,aAAa;AACf;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:["body {\r\n  background-color: #fff;\r\n}\r\n\r\nh1 {\r\n  display: none;\r\n}\r\n\r\n.list-container {\r\n  margin: 5% 25% 0 25%;\r\n  padding: 20px 0 0 0;\r\n  box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\r\n  -webkit-box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\r\n  -moz-box-shadow: 3px 3px 5px 0 rgba(0, 0, 0, 0.75);\r\n}\r\n\r\n.iconed,\r\n.sub-icon {\r\n  padding-right: 10px;\r\n  cursor: pointer;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.sub-icon:hover {\r\n  font-size: 20px;\r\n}\r\n\r\np {\r\n  font-size: 1.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n}\r\n\r\n.contain-icons {\r\n  display: flex;\r\n}\r\n\r\n.to-do-list {\r\n  padding: 0;\r\n}\r\n\r\n.text {\r\n  border: 0;\r\n  text-transform: inherit;\r\n  font-style: italic;\r\n  padding: 16px 10px;\r\n  padding-bottom: 16px;\r\n  width: 100%;\r\n  outline: none;\r\n  \r\n}\r\n\r\nul li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 2%;\r\n  border-bottom: 1px solid #c9bebeab;\r\n}\r\n\r\n.input {\r\n  width: 100%;\r\n}\r\n\r\nul li:last-child {\r\n  justify-content: center;\r\n}\r\n\r\n.icons {\r\n  color: #746d6d;\r\n}\r\n\r\n.icons:hover {\r\n  cursor: move;\r\n  color: #000;\r\n}\r\n\r\n.icon-d {\r\n  padding-right: 5px;\r\n}\r\n\r\n/* .icon-d:hover {\r\n  color: orange;\r\n  font-size: 20px;\r\n} */\r\n\r\n.strike-through {\r\n  text-decoration: line-through;\r\n  color: #746d6d;\r\n}\r\n\r\n.task {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n}\r\n\r\n.contain {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid #c9bebeab;\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.heading {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-bottom: 20px;\r\n  border-bottom: 1px solid #c9bebeab;\r\n}\r\n\r\n.to-do-list button {\r\n  border: 0;\r\n  background-color: #fff;\r\n  margin: 16px;\r\n  font-size: 16px;\r\n  color: #746d6d;\r\n}\r\n\r\n.clear-all {\r\n  border: none;\r\n  background-color: #fff;\r\n  width: 100%;\r\n  font-size: 25px;\r\n  margin-bottom: 10px;\r\n  padding: 1rem 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.clear-all:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.save {\r\n  border: none;\r\n  background-color: #548b3b85;\r\n  padding: 15px;\r\n  font-size: 16px;\r\n  width: 100%;\r\n  display: none;\r\n}\r\n\r\n.save:hover {\r\n  background-color: #548b3be6;\r\n}\r\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);t&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),r.push(d))}},r}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(i).concat([a]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],A=t.base?s[0]+t.base:s[0],d=a[A]||0,l="".concat(A," ").concat(d);a[A]=d+1;var p=e(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)r[p].references++,r[p].updater(u);else{var f=o(u,t);t.byIndex=c,r.splice(c,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=e(a[i]);r[c].references--}for(var s=t(n,o),A=0;A<a.length;A++){var d=e(a[A]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}a=s}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r);var t={};(()=>{e.d(t,{C:()=>b});class n{constructor(n,r,e){this.index=n,this.description=r,this.completed=e}listCode(){return`<li data-id="${this.index}"><div data-id="${this.index+1}" class="task"><input class="check-box to-do-list-${this.index}" type="checkbox"><p contenteditable="true" class="edit">${this.description}</p></div>\n    <div class="contain-icons"><i class="fas fa-trash-alt icon-d"></i> <i class="fas fa-ellipsis-v icons"></i></div>`}static addTo(n){b.push(n),localStorage.setItem("ListAr",JSON.stringify(b))}static remove(n){b=b.filter((r=>r.index!==Number(n)));for(let n=0;n<b.length;n+=1)b[n].index=n+1;localStorage.setItem("ListAr",JSON.stringify(b))}}var r=e(379),o=e.n(r),a=e(795),i=e.n(a),c=e(569),s=e.n(c),A=e(565),d=e.n(A),l=e(216),p=e.n(l),u=e(589),f=e.n(u),m=e(426),E={};E.styleTagTransform=f(),E.setAttributes=d(),E.insert=s().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=p(),o()(m.Z,E),m.Z&&m.Z.locals&&m.Z.locals;let b=JSON.parse(localStorage.getItem("ListAr"))||[];const h=document.createElement("div");h.className="list-container";const x=document.createElement("p");x.className="heading",x.textContent="Today's To do";const C=document.createElement("span");C.innerHTML='<i class="fas fa-sync-alt icons iconed"></i>',x.append(C),h.append(x);const g=document.createElement("div");g.className="contain";const v=document.createElement("div");v.className="input";const B=document.createElement("input");B.placeholder="Add to your list...",B.type="text",B.className="text";const y=document.createElement("div");y.innerHTML='<i class="fas fa-plus sub-icon"></i>',g.append(v),g.append(y),v.append(B),h.append(g);const k=document.createElement("button");k.type="button",k.className="clear-all",k.textContent="Clear all completed",document.body.insertAdjacentElement("afterbegin",h);const w=document.createElement("button");w.className="save",w.textContent="Save edits";const S=document.querySelector(".to-do-list");function L(){const r=b.map((r=>new n(r.index,r.description,r.completed).listCode()));S.innerHTML=r.join("");document.querySelectorAll(".check-box").forEach((n=>{n.addEventListener("change",(n=>{!function(n,r){if(n){r.classList.add("strike-through");const n=r.getAttribute("data-id");for(let r=0;r<b.length;r+=1)b[r].index=r+1,Number(n-1)===b[r].index&&(b[r].completed=!0,localStorage.setItem("ListAr",JSON.stringify(b)))}else{r.classList.remove("strike-through");const n=r.getAttribute("data-id");for(let r=0;r<b.length;r+=1)Number(n-1)===b[r].index&&(b[r].completed=!1,localStorage.setItem("ListAr",JSON.stringify(b)))}}(n.target.checked,n.target.parentElement)}))})),document.querySelectorAll(".icon-d").forEach((r=>{r.addEventListener("click",(r=>{const e=r.target.parentElement.parentElement.getAttribute("data-id");n.remove(e),L()}))}))}h.append(S),h.append(k),h.append(w),L(),document.addEventListener("DOMContentLoaded",(()=>{document.querySelector(".sub-icon").addEventListener("click",(()=>{const r=document.querySelector(".text"),e=r.value.trim();if(!e)return;let t=0;0===b.length?t=b.length+1:b.length>0&&(t=b[b.length-1].index+1);const o=new n(t,e,!1);n.addTo(o),L(),r.value=""})),document.querySelector(".clear-all").addEventListener("click",(()=>{b=b.filter((n=>!1===n.completed)),L();for(let n=0;n<b.length;n+=1)b[n].index=n+1;localStorage.setItem("ListAr",JSON.stringify(b))})),document.querySelectorAll(".check-box").forEach((n=>{for(let r=0;r<b.length;r+=1)if(!0===b[r].completed){const e=n.parentElement.getAttribute("id");Number(e)===b[r].index&&(n.parentElement.classList.add("strike-through"),n.checked=!0)}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,